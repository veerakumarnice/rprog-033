download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
setwd("C:/Veerakumar/My Documents/Statistics")
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
load(url("http://bit.ly/dasi_gss_data"))
load(url("http://bit.ly/dasi_gss_data"))
names(gss)
summary(sucide4)
summary(gss$sucide4)
dim(gss)
View(gss)
View(gss)
View(gss)
gss$educ[1:10]
plot(gss$age, gss$sex)
plot(gss$region, gss$age)
plot(gss$region, gss$owngun)
plot(gss$region, gss$owngun, type="l")
plot(gss$region, gss$owngun, type="l")
dim(gss)
dim(gss)
barplot(table(gss$region, gss$owngun))
summary(gss$region)
View(gss)
View(gss)
summary(gss)
gss$sei[1:100]
subset(gss, age>20)
subset(gss, age>20 & age != NA)
summary(gss$age)
summary(gss)
gss$conpress[200]
gss$conpress[201]
subset(gss, conpress == 1)
subset(gss, conpress != NA)
subset(gss, conpress == "1")
gss[rownames(gss$conpress) == "1" ]
gss[rownames(gss$conpress) == "2" ]
gss[rownames(conpress) == "2" ]
plot(gss$region, mean(gss$childs))
plot(gss$region, gss$childs)
plot(gss$income06, gss$childs)
plot(gss$region, gss$income06)
boxplot(gss$region, gss$income06)
boxplot(table(gss$region, gss$income06))
mosaicplot(table(gss$region, gss$income06))
summary(gss$relig)
summary(gss$relig, gss$attend)
summary(gss)
boxplot(gss$region)
table(gss$fear, gss$owngun)
table(gss$region, gss$abrape)
table(gss$region, gss$income06)
mosaicplot(gss$region, gss$income06)
plot(gss$region, gss$news)
summary(gss$news)
plot(gss$region, gss$fear)
table(gss$region, gss$fear)
plot(table(gss$region, gss$fear))
plot(table(gss$fear,gss$region))
table(gss$region, gss$racdif3)
table(gss$region, gss$racdif1)
subset(gss, gss$region == "1" )
subset(gss, gss$region == 1 )
subset(gss, gss$age == 20 )
head(gss$region)
subset(gss, gss$age == 20 & gss$sex == 1)
subset(gss, gss$age == 20 & gss$sex == MALE )
subset(gss, gss$age == 20 & gss$sex == "MALE" )
hist(gss$region)
hist(gss$age)
hist(head(gss$age))
table(gss$region, gss$news)
barplot(table(gss$region, gss$news))
mosaicplot(table(gss$region, gss$news))
mosaicplot(gss$region, gss$news)
table(gss$region, gss$news)
plot(table(gss$region, gss$news))
table(gss$age, gss$news)
plot(gss$age, gss$news)
barplot(gss$news, gss$age)
barplot(gss$news, mean(gss$age))
mean(gss$age)
mean(gss$age)
View(gss)
View(gss)
subset(gss, gss$year == 1972)
table(gss$age, gss$news)
table(gss$age>20 & <30, gss$news)
table(gss$age>20 & gss$age<30, gss$news)
table(gss$age == 20, gss$news)
table(gss$age == 21, gss$news)
table(gss$age > 20, gss$news)
table(gss$age < 20, gss$news)
lessthan20 <- subset(gss, gss$age <20)
greaterthan50 <- subset(gss, gss$age > 50)
View(lessthan20)
lessthan50 <- subset(gss, gss$age <= 50)
barplot(lessthan50$news, greaterthan50$news)
plot(lessthan50$news, greaterthan50$news)
table(lessthan50$news, greaterthan50$news)
dim(subset(gss, gss$age > 50))
dim(subset(gss, gss$region == "E. Nor. Central))
)
@
)
A
)
skd
dim(subset(gss, gss$age > 50))
dim(subset(gss, gss$age > 20))
dim(subset(gss, gss$region > "Middle Atlantic"))
dim(subset(gss, gss$region = "Middle Atlantic"))
dim(subset(gss, gss$region = Middle Atlantic))
dim(subset(gss, gss$region = 1))
dim(subset(gss, gss$region == 1))
dim(subset(gss, gss$region == "Middle Atlantic"))
dim(subset(gss, gss$region == "NEW ENGLAND"))
dim(subset(gss, gss$region == "W. Sou. Centra"))
dim(subset(gss, gss$region == "W. Sou. Central"))
dim(subset(gss, gss$region == "New England"))
dim(subset(gss, gss$region == "New England")).sum
dim(subset(gss, gss$region == "New England")).sum()
dim(subset(gss, gss$region == "New England"))
dim(subset(gss, gss$region == "Not Assigned"))
summary(gss$news)
summary(gss$news)
dim(subset(gss, gss$news == "NA's"))
dim(subset(gss, gss$news == "NA\'s"))
dim(subset(gss, gss$news == "Never"))
dim(subset(gss, gss$news == "NA"))
dim(subset(gss, gss$news == "NAs"))
dim(subset(gss, gss$news == "NA's"))
dim(subset(gss, gss$news == "NA"))
summary(gss$homosex)
mosaicplot(table(gss$region, gss$news))
barplot(gss$news, gss$age)
subset()
subset
subset(gss, gss$age, gss$year)
c("age", "year")
this <- c("age", "year")
ageandyear <- gss[this]
View(ageandyear)
this <- c("age", "region", "news")
testsample <- gss[this]
View(testsample)
dim(testsample)
dim(gss)
test <- testsample
View(ageandyear)
this <- c("age", "region", "news")
gsst <- gss[this]
View(gsst)
mosaicplot(table(gsst$region, gsst$news))
mean(gsst$age)
head(gsst$age)
boxplot(gsst$age)
barplot(gsst$age)
mosaicplot(table(gsst$region, gsst$news))
table(gsst$age, gsst$news)
table(gsst$age < 20, gsst$news)
var1 <- (gsst$age < 0)
var1 <- (gsst$age < 20)
table(var1, gsst$news)
lessthan20 <- (gsst$age <=20 )
twentyto30 <- (gsst$age >20 & gsst$age <=40)
var2 <- (lessthan20, twentyto30)
var2 <- ("lessthan20", "twentyto30")
var1 <- (gsst$age <= 20, gsst$age >20 & gsst$age <= 40)
var2 <- [lessthan20, twentyto30]
table(twentyto30, gsst$news)
plot(twentyto30, gsst$news)
barplot(twentyto30, gsst$news)
barplot(gsst$news, twentyto30)
table(gsst$region, gsst$news)
gsst[1:20]
gsst[1:20]
gsst$region[1:20]
this <- c("region", "news")
test <- gsst[this]
view(test)
View(test)
View(test)
View(gsst)
View(gsst)
View(gsst)
summary(gsst$news)
summary(gsst$news)
dim(gsst)
dim(subset(gsst, gsst$region == "W. Sou. Central"))
dim(subset(gsst, gsst$region == "E. Nor. Central"))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news== "" ))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news== "NA" ))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news != "NA" ))
dim(subset(gsst, gsst$news != "NA" ))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news != "NA" ))
dim(subset(gsst, gsst$region == "E. Nor. Central"))
nrow(subset(gsst, gsst$region == "E. Nor. Central"))
dim(subset(gsst, gsst$region == "Pacific" & gsst$news != "NA" ))
dim(subset(gsst, gsst$region == "Pacific"))
nrow(subset(gsst, gsst$region == "Pacific" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Pacific"))
pacific <- nrow(subset(gsst, gsst$region == "Pacific" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Pacific"))
mountain <- nrow(subset(gsst, gsst$region == "Mountain" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Mountain"))
mountain <- nrow(subset(gsst, gsst$region == "New England" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "New England"))
mountain <- nrow(subset(gsst, gsst$region == "Mountain" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Mountain"))
engalnd <- nrow(subset(gsst, gsst$region == "New England" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "New England"))
dbinom(60, 100, 0.56)
sum(dbinom(60:100, 100,0.56))
sum(dbinom(60:100, size = 100, p = 0.56))
sum(dbinom(60:100, size, p))
norm()
orm
norm
norm( 17,20 ,3)
pnorm(200 ,1000,100)
pnorm(800 ,1000,100)
pnorm(1100 ,1000,100) - pnorm(900 ,1000,100)
norm
qqplot
pnorm(1300 ,1000,100)
pnorm(800 ,1000,100)
1 - pnorm(1300 ,1000,100)
1 - pnorm(1200 ,1000,100)
pnorm(900 ,1000,100)
dbinom(92, 100, 0.9)
sum(dbinom(0:3,7,0.3))
sum(dbinom(0:35, 3000000, 0.00001))
1 - sum(dbinom(0:35, 3000000, 0.00001))
install.packages("swirl")
library("swirl")
swirl
swirl()
names(gss)
row.names(gss)
names(this)
this
dump(c("this"),file="helo.R")
dput(this)
dput(this, file = "hello.R")
rm(this)
this <- dget("hello.R")
rm(this)
source("hello.R")
source("helo.R")
names(gsst)
mosaicplot(table(gsst$region, gsst$news))
barplot(table(gsst$region, gsst$news))
qnorm(0.025)
qnorm(0.01)
load(url("http://www.openintro.org/stat/data/ames.RData"))
names(ames)
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
summary(price)
hist(area)
boxplot(area)
hist(area)
boxplot(area)
samp0 <- sample(area, 50)
samp1 <- sample(area, 50)
mean(samp1)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
sample_means50 <- rep(NA, 5000)
samp <- sample(area, 50)
sample_means50[1] <- mean(samp)
samp <- sample(area, 50)
sample_means50[2] <- mean(samp)
samp <- sample(area, 50)
sample_means50[3] <- mean(samp)
samp <- sample(area, 50)
sample_means50[4] <- mean(samp)
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
pnorm(2, lower.tail =  FALSE)
pnorm(2, lower.tail =  FALSE) * 2
pt(2, df = 50, lower.tail =  FALSE)
pt(2, df = 50, lower.tail =  FALSE) * 2
pt(2, df = 10, lower.tail =  FALSE) * 2
qt(0.025, df = 21)
pt(2.3, lower.tail =  FALSE ) *
2
pt(2.3, lower.tail =  FALSE ) * 2
pt(2.3, df = 21, lower.tail =  FALSE ) * 2
pt(2.485, df = 25, lower.tail = FALSE) * 2
load(url("http://bit.ly/dasi_nc"))
summary(nc)
gained_clean = na.omit(nc$gained)
n = length(gained_clean)
n
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
source("http://bit.ly/dasi_inference")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.90, est = "mean", boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean", boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean", boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median", boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "median", boot_method = "se")
by(nc$weight, nc$habit, mean)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker","nonsmoker"))
f <- gl(40, 10)
f
summary(f)
str(f)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
e
y <- 0.5 + 2*x + e
y
summary(y)
plot(x, y)
sample(letters, 5)
letters
str(letters)
timed <- function() {}
timed <- function() {
return(1)
}
system.time(timed())
## these funtions are used to avoid calculating inverse again
## one it is calculated.
## returns a list of cache vetors to the object for matrix inverse calculation
makeCacheMatrix <- function(x = matrix()) {
## sets the inverse matrix to be null at beginning
m <- NULL
set <- function(input) { ## sets a new matrix so inverse is set to null
x <<- input
m <<- NULL
}
## returns the matrix
get <- function() x
## sets the inverse cache
setsolve <- function(input) m <<- input
## gets the inverse cche
getsolve <- function() m
## returns a list of the cache vectors at the creation of the object
list(set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
## chechks whether inverse is already calculated if not
##calculates a new inverse
## Returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
##the getsolve methods returns the value precomputed inverse if any
temp <- x$getsolve()
##if the inverse is already computed the existing value is returned
if(!is.null(temp)) {
## displays a message that it is precomputed
message("getting cached data")
return(temp)
}
## if the inverse has not yet calculated then the inverse is calculated
## and stored in the cache
data <- x$get()
solved <- solve(data)
x$setsolve(solved)
## the computed inverse is returned
solved
}
m = matrix(1:9, 3, 3)
m
obj <- makeCacheMatrix(m)
system.time(cacheSolve(obj))
cacheSolve(obj)
obj
obj$get()
obj$getsolve()
cacheSolve(obj)
solve(m)
m
m <- matrix(1:4, 2, 2)
m
solve(m)
obj <- makeCacheMatrix(m)
system.time(cacheSolve(obj))
summary(lm)
str(lm)
help
help(lm)
by.self
help(by.self)
Rprof()
by.self
help(Rprof)
Rprof(mean(1:100))
Rprof(mean(c(1:100)))
mean(c(1:100))
mean(c(1:100))$by.self
Rprof()
Rprof(NULL)
End
Rprof(NULL)\dots
Rprof(NULL)\dots
Rprof(NULL)
\dots
summaryRprof()
ls
str(ls)
summaryRprof()
set.seed(1)
rpois(5,2)
str(qpois)
help(spois)
help(qpois)
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
library(datasets)
Rprof()
fir <- lm(y ~ x1 + x2)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("C:/Veerakumar/Coursera/Data Science Specialization/Course 2 - R Programming/assignments/assignment3")
setwd("C:/Veerakumar/Coursera/Data Science Specialization/Course 2 - R Programming/assignments/assignment3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
View(outcome)
"helo".equals("helo")
"helo" == "helo"
a <- "helo"
b <- "helo"
a == b
small(3,4,5)
help(small)
??small
View(gsst)
