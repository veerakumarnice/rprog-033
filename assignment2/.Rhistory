subset(gss, gss$year == 1972)
table(gss$age, gss$news)
table(gss$age>20 & <30, gss$news)
table(gss$age>20 & gss$age<30, gss$news)
table(gss$age == 20, gss$news)
table(gss$age == 21, gss$news)
table(gss$age > 20, gss$news)
table(gss$age < 20, gss$news)
lessthan20 <- subset(gss, gss$age <20)
greaterthan50 <- subset(gss, gss$age > 50)
View(lessthan20)
lessthan50 <- subset(gss, gss$age <= 50)
barplot(lessthan50$news, greaterthan50$news)
plot(lessthan50$news, greaterthan50$news)
table(lessthan50$news, greaterthan50$news)
dim(subset(gss, gss$age > 50))
dim(subset(gss, gss$region == "E. Nor. Central))
)
@
)
A
)
skd
dim(subset(gss, gss$age > 50))
dim(subset(gss, gss$age > 20))
dim(subset(gss, gss$region > "Middle Atlantic"))
dim(subset(gss, gss$region = "Middle Atlantic"))
dim(subset(gss, gss$region = Middle Atlantic))
dim(subset(gss, gss$region = 1))
dim(subset(gss, gss$region == 1))
dim(subset(gss, gss$region == "Middle Atlantic"))
dim(subset(gss, gss$region == "NEW ENGLAND"))
dim(subset(gss, gss$region == "W. Sou. Centra"))
dim(subset(gss, gss$region == "W. Sou. Central"))
dim(subset(gss, gss$region == "New England"))
dim(subset(gss, gss$region == "New England")).sum
dim(subset(gss, gss$region == "New England")).sum()
dim(subset(gss, gss$region == "New England"))
dim(subset(gss, gss$region == "Not Assigned"))
summary(gss$news)
summary(gss$news)
dim(subset(gss, gss$news == "NA's"))
dim(subset(gss, gss$news == "NA\'s"))
dim(subset(gss, gss$news == "Never"))
dim(subset(gss, gss$news == "NA"))
dim(subset(gss, gss$news == "NAs"))
dim(subset(gss, gss$news == "NA's"))
dim(subset(gss, gss$news == "NA"))
summary(gss$homosex)
mosaicplot(table(gss$region, gss$news))
barplot(gss$news, gss$age)
subset()
subset
subset(gss, gss$age, gss$year)
c("age", "year")
this <- c("age", "year")
ageandyear <- gss[this]
View(ageandyear)
this <- c("age", "region", "news")
testsample <- gss[this]
View(testsample)
dim(testsample)
dim(gss)
test <- testsample
View(ageandyear)
this <- c("age", "region", "news")
gsst <- gss[this]
View(gsst)
mosaicplot(table(gsst$region, gsst$news))
mean(gsst$age)
head(gsst$age)
boxplot(gsst$age)
barplot(gsst$age)
mosaicplot(table(gsst$region, gsst$news))
table(gsst$age, gsst$news)
table(gsst$age < 20, gsst$news)
var1 <- (gsst$age < 0)
var1 <- (gsst$age < 20)
table(var1, gsst$news)
lessthan20 <- (gsst$age <=20 )
twentyto30 <- (gsst$age >20 & gsst$age <=40)
var2 <- (lessthan20, twentyto30)
var2 <- ("lessthan20", "twentyto30")
var1 <- (gsst$age <= 20, gsst$age >20 & gsst$age <= 40)
var2 <- [lessthan20, twentyto30]
table(twentyto30, gsst$news)
plot(twentyto30, gsst$news)
barplot(twentyto30, gsst$news)
barplot(gsst$news, twentyto30)
table(gsst$region, gsst$news)
gsst[1:20]
gsst[1:20]
gsst$region[1:20]
this <- c("region", "news")
test <- gsst[this]
view(test)
View(test)
View(test)
View(gsst)
View(gsst)
View(gsst)
summary(gsst$news)
summary(gsst$news)
dim(gsst)
dim(subset(gsst, gsst$region == "W. Sou. Central"))
dim(subset(gsst, gsst$region == "E. Nor. Central"))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news== "" ))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news== "NA" ))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news != "NA" ))
dim(subset(gsst, gsst$news != "NA" ))
dim(subset(gsst, gsst$region == "E. Nor. Central" & gsst$news != "NA" ))
dim(subset(gsst, gsst$region == "E. Nor. Central"))
nrow(subset(gsst, gsst$region == "E. Nor. Central"))
dim(subset(gsst, gsst$region == "Pacific" & gsst$news != "NA" ))
dim(subset(gsst, gsst$region == "Pacific"))
nrow(subset(gsst, gsst$region == "Pacific" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Pacific"))
pacific <- nrow(subset(gsst, gsst$region == "Pacific" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Pacific"))
mountain <- nrow(subset(gsst, gsst$region == "Mountain" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Mountain"))
mountain <- nrow(subset(gsst, gsst$region == "New England" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "New England"))
mountain <- nrow(subset(gsst, gsst$region == "Mountain" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "Mountain"))
engalnd <- nrow(subset(gsst, gsst$region == "New England" & gsst$news != "NA" ))/nrow(subset(gsst, gsst$region == "New England"))
dbinom(60, 100, 0.56)
sum(dbinom(60:100, 100,0.56))
sum(dbinom(60:100, size = 100, p = 0.56))
sum(dbinom(60:100, size, p))
norm()
orm
norm
norm( 17,20 ,3)
pnorm(200 ,1000,100)
pnorm(800 ,1000,100)
pnorm(1100 ,1000,100) - pnorm(900 ,1000,100)
norm
qqplot
pnorm(1300 ,1000,100)
pnorm(800 ,1000,100)
1 - pnorm(1300 ,1000,100)
1 - pnorm(1200 ,1000,100)
pnorm(900 ,1000,100)
dbinom(92, 100, 0.9)
sum(dbinom(0:3,7,0.3))
sum(dbinom(0:35, 3000000, 0.00001))
1 - sum(dbinom(0:35, 3000000, 0.00001))
install.packages("swirl")
library("swirl")
swirl
swirl()
names(gss)
row.names(gss)
names(this)
this
dump(c("this"),file="helo.R")
dput(this)
dput(this, file = "hello.R")
rm(this)
this <- dget("hello.R")
rm(this)
source("hello.R")
source("helo.R")
names(gsst)
mosaicplot(table(gsst$region, gsst$news))
barplot(table(gsst$region, gsst$news))
qnorm(0.025)
qnorm(0.01)
load(url("http://www.openintro.org/stat/data/ames.RData"))
names(ames)
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
summary(price)
hist(area)
boxplot(area)
hist(area)
boxplot(area)
samp0 <- sample(area, 50)
samp1 <- sample(area, 50)
mean(samp1)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
sample_means50 <- rep(NA, 5000)
samp <- sample(area, 50)
sample_means50[1] <- mean(samp)
samp <- sample(area, 50)
sample_means50[2] <- mean(samp)
samp <- sample(area, 50)
sample_means50[3] <- mean(samp)
samp <- sample(area, 50)
sample_means50[4] <- mean(samp)
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
getd()
getwd()
getwd()
setwd("C:/Veerakumar/Coursera/Data Science Specialization/Course 2 - R Programming/assignments/assignment2")
getwd()
m <- c(2,3,4,5,6,8)
dim(m) <- c(2,3)
m
ginv(m)
solve(m)
m <- c(2,4,6,7)
dim(m) <- c(2,2)
m
solve(m)
ginv(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
m
}
m
solve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setsolve(m)
m
}
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(m)
debug(cacheSolve)
cacheSolve(m)
is.recursive(getsolve)
is.recursive(m)
is.atomic(m)
getElement(m)
getElement(m, exact = TRUE)
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- NULL
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set  set, get= get, setsolve = setsolve, getsolve = getsolve)
}
getwd()
4
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- NULL
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set  set, get= get, setsolve = setsolve, getsolve = getsolve)
}
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- NULL
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set = set, get= get, setsolve = setsolve, getsolve = getsolve)
}
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- NULL
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set = set, get= get, setsolve = setsolve, getsolve = getsolve)
}
cache <- function(input) {
input$getsolve
}
cache(m)
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- matrix()
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set = set, get= get, setsolve = setsolve, getsolve = getsolve)
}
cache <- function(input) {
input$getsolve
}
cache(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m
vec <- c(3,4,5,6,7,8,9)
cachemean(vec)
makeVector(vec)
cachemean(vec)
ret_matrix(m)
cache(m)
m$x
x
m
m$m
m[m]
source("temp.R")
ret_matrix(m)
cache(m)
obj <- makeVector(vec)
obj$getmean()
cachemean(vec)
obj$get()
cachemean(obj)
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- NULL
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() m
list(set = set, get= get, setsolve = setsolve, getsolve = getsolve)
}
cache <- function(input) {
input$getsolve
}
obj <- ret_matrix(m)
cache(obj)
ret_matrix <- function(x = matrix()) {
x <- NULL
m <- NULL
set <- function(input) {
x <<- input
m <<- NULL
}
get <- function() x
setsolve <- function(input) m <<- input
getsolve <- function() {m}
list(set = set, get= get, setsolve = setsolve, getsolve = getsolve)
}
cache <- function(input) {
input$getsolve
}
input <- ret_matrix(m)
cache(input)
source("cachematrix.R")
source("cachematrix.R")
obj <- makeCacheMatrix(m)
m
obj
obj$get()
obj$getsolve()
cacheSolve(m)
cacheSolve(obj)
cacheSolve(obj)
source("cachematrix.R")
cacheSolve(obj)
source("cachematrix.R")
cacheSolve(obj)
obj$getsolve()
newvec <- matrix(1,2,3,4)
newvec
newvec <- matrix(2,2,3,4)
newvec
mat <- c(1,2,3,4)
dim(mat) <- c(2,2)
mat
solve(m)
newvec <- makeCacheMatrix(m)
cacheSolve(newvec)
source("cachematrix.R")
newvec <- makeCacheMatrix(m)
newvec$get()
newvec
newvect <- makeCacheMatrix(m)
newvect$get()
m
mat
newvect <- makeCacheMatrix(mat)
newvect$get()
cacheSolve(newvec)
cacheSolve(newvect)
solve(newvec$get())
solve(newvect$get())
source("cachematrix.R")
thisone <- makeCacheMatrix(mat)
thisone$get()
solve(thisone$get())
cacheSolve(thisone)
thisone$setsolve(mat)
cacheSolve(thisone)
thisone$setsolve(mat)
thisone$setsolve(mat)
cacheSolve(thisone)
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
newvec$getsolve()
newvec$setsolve(mat)
newvec$getsolve()
cacheSolve(newvec)
newvec$getsolve()
source("cachematrix.R")
remove(newvec)
thisone <- makeCacheMatrix(mat)
thisone$get()
thisone$getsolve()
cacheSolve(thisone)
source("cachematrix.R")
thisone <- makeCacheMatrix(mat)
thisone$getsolve()
cacheSolve(thisone)
cacheSolve(thisone)
cacheSolve(thisone)
